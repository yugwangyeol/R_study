c<-rep(a,a)
}
i=i+1
}
paste(c)
print(c)
}
Q5(5)
str(c)
b<-rep(0,sum(1:x))
x=4
b<-rep(0,sum(1:x))
#문제 5번
Q5<-function(x){
i<-1
b<-rep(0,sum(1:x))
while(i<=x){
for(a in 1:i){
a<-i
c<-rep(a,a)
}
b[(sum(1:(x-1))+1):((sum(1:(x-1))+1)+i)]<-c
i=i+1
}
print(c)
}
Q5(5)
#문제 5번
Q5<-function(x){
i<-1
b<-rep(0,sum(1:x))
while(i<=x){
for(a in 1:i){
a<-i
c<-rep(a,a)
}
b[(sum(1:(a-1))+1):((sum(1:(a-1))+1)+i)]<-c
i=i+1
}
print(c)
}
Q5(5)
#문제 5번
Q5<-function(x){
i<-1
b<-rep(0,sum(1:x))
while(i<=x){
for(a in 1:i){
a<-i
c<-rep(a,a)
}
if(a==1){
b[1]<-c
}else{
b[(sum(1:(a-1))+1):((sum(1:(a-1))+1)+i)]<-c
}
i=i+1
}
print(c)
}
Q5(5)
#문제 5번
Q5<-function(x){
i<-1
b<-rep(0,sum(1:x))
while(i<=x){
for(a in 1:i){
a<-i
c<-rep(a,a)
}
if(a==1){
b[1]<-c
}else{
b[(sum(1:(a-1))+1):(sum(1:(a-1))+i)]<-c
}
i=i+1
}
print(c)
}
Q5(5)
#문제 5번
Q5<-function(x){
i<-1
b<-rep(0,sum(1:x))
while(i<=x){
for(a in 1:i){
a<-i
c<-rep(a,a)
}
if(a==1){
b[1]<-c
}else{
b[(sum(1:(a-1))+1):(sum(1:(a-1))+i)]<-c
}
i=i+1
}
print(b)
}
Q5(5)
Q5(7)
Q4(1234)
#문제 4번
Q4<-function(x){
y<-as.character(x)
z<-strsplit(y,'')
a<-unlist(z)
c<-length(a)
d<-1
b<-rep(0,c)
for(d in 1:c){
a<-x%/%10
b[d]<-x%%10
x<-a
d<=d+1
}
e<-sum(b)
print(e)
}
Q4(1234)
#문제 3번
Q3<-function(x){
y<-as.character(x)
z<-strsplit(y,'')
a<-unlist(z)
b<-length(a)
print(b)
}
Q3(12355)
a<-rep(0,100)
for(i in 1:100){
if(i%%3==0){
a[i]<-'Fizz'
}else if(i%%5==0){
a[i]<-'Buzz'
}else{
a[i]<-i
}
if(i%%15==0){
a[i]<-'FizzBuzz'
}
}
print(a)
# 문제 1번
sum_function <-function(x){
a<-rep(0,x%/%2)
b<-rep(0,(x%/%2)+1)
for(i in 1:x){
if(i%%2==0){
a[i%/%2]<-i
}else{
b[(i%/%2)+1]<-i
}
}
sprintf("홀수의 합=%d,짝수의 합=%d",sum(b),sum(a))
}
sum_function(10)
if (!require(caret)) {install.packages(('caret'))} ; library(caret)
if (!require(kernlab)) {install.packages(('kernlab'))} ; library(kernlab)
if (!require(tree)) {install.packages(('tree'))} ; library(tree)#버전문제
if (!require(party)) {install.packages(('party'))} ; library(party)
if (!require(e1071)) {install.packages(('e1071'))} ; library(e1071)
A_train<-read.csv('A_train.csv')
B_test<-read.csv('B_test.csv')
A_train$diagnosis<-as.factor(A_train$diagnosis)
setwd("C:/Users/rltjq/Desktop/D&A/ML Session/ML_3주차/3주차 의사결정나무/과제")
A_train<-read.csv('A_train.csv')
B_test<-read.csv('B_test.csv')
A_train$diagnosis<-as.factor(A_train$diagnosis)
inTrain <- createDataPartition(y = A_train$diagnosis, p = 0.75, list = FALSE)
training <- A_train[inTrain, ]
testing <- A_train[-inTrain, ]
set.seed(32343)
modelFit <- train(diagnosis~ ., data = training, method = "rpart")
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
grid<-expand.grid(maxdepth=c(2,4,6,7,8,9))
modelfit<-train(diagnosis~.,data=training,method='rpart2',trControl='cv',tunegrid=grid)
cv<-trainControl(method='cv',number=5,verbose = T)
grid<-expand.grid(maxdepth=c(3,4,5,7,8,9))
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",trControl=fitcontrol,tunegrid=grid)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",trControl=cv,tunegrid=grid)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
cv<-trainControl(method='cv',number=5,verbose = T)
grid<-expand.grid(maxdepth=c(3,4,5,7,8,9))
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",trControl=cv,tunegrid=grid)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",trControl='cv',tunegrid=grid)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",trControl=cv,tunegrid=grid)
grid=expand.grid(maxdepth=c(3,4,5,6,7))
modelFit<-train(diagnosis~.,data=training,method='rpart2',tunegrid=grid,trControl=cv)
if (!require(caret)) {install.packages(('caret'))} ; library(caret)
if (!require(kernlab)) {install.packages(('kernlab'))} ; library(kernlab)
if (!require(tree)) {install.packages(('tree'))} ; library(tree)#버전문제
if (!require(party)) {install.packages(('party'))} ; library(party)
if (!require(e1071)) {install.packages(('e1071'))} ; library(e1071)
#데이터 불러오기
A_train<-read.csv('A_train.csv')
B_test<-read.csv('B_test.csv')
A_train$diagnosis<-as.factor(A_train$diagnosis)
#hold-out방법으로 성능체크
inTrain <- createDataPartition(y = A_train$diagnosis, p = 0.75, list = FALSE)
training <- A_train[inTrain, ]
testing <- A_train[-inTrain, ]
set.seed(32343)
modelFit <- train(diagnosis~ ., data = training, method = "rpart")
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
#새로운 데이터의 y값 예측하기
predictions <- predict(modelFit, newdata = B_test)
#제출할 파일 제출
sub<-data.frame(diagnosis=predictions)
write.csv(sub,'sub.csv',row.names = FALSE)
grid=expand.grid(maxdepth=c(3,4,5,6,7))
modelFit<-train(diagnosis~.,data=training,method='rpart2',tunegrid=grid,trControl=cv)
set.seed(1234)
modelFit<-train(diagnosis~.,data=training,method='rpart')
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
grid<-expand.grid(maxdepth=c(2,4,6,7,8,9))
modelfit<-train(diagnosis~.,data=training,method='rpart2',trControl='cv',tunegrid=grid)
modelfit<-train(diagnosis~.,data=training,method='rpart2',trControl=cv,tunegrid=grid)
inTrain<-createDataPartition(y=A_train$diagnosis,p=.7,list=F)
training<-A_train[inTrain,]
testing<-A_train[-inTrain,]
modelfit<-train(diagnosis~.,data=training,method='rpart')
predictions<-predict(modelfit,newdata=testing)
confusionMatrix(predictions,testing$diagnosis)
if (!require(caret)) {install.packages(('caret'))} ; library(caret)
if (!require(kernlab)) {install.packages(('kernlab'))} ; library(kernlab)
if (!require(tree)) {install.packages(('tree'))} ; library(tree)#버전문제
if (!require(party)) {install.packages(('party'))} ; library(party)
if (!require(e1071)) {install.packages(('e1071'))} ; library(e1071)#데이터 불러오기
setwd("C:/Users/rltjq/Desktop/D&A/ML Session/ML_3주차/3주차 의사결정나무/과제")
inTrain<-createDataPartition(y=A_train$diagnosis,p=.7,list=F)
training<-A_train[inTrain,]
testing<-A_train[-inTrain,]
modelfit<-train(diagnosis~.,data=training,method='rpart')
predictions<-predict(modelfit,newdata=testing)
confusionMatrix(predictions,testing$diagnosis)
inTrain<-createDataPartition(y=A_train$diagnosis,p=.7,list=F)
training<-A_train[inTrain,]
testing<-A_train[-inTrain,]
modelfit<-train(diagnosis~.,data=training,method='rpart')
predictions<-predict(modelfit,newdata=testing)
confusionMatrix(predictions,testing$diagnosis)
inTrain<-createDataPartition(y=A_train$diagnosis,p=.7,list=F)
A_train
A_train<-read.csv('A_train.csv')
B_test<-read.csv('B_test.csv')
A_train$diagnosis<-as.factor(A_train$diagnosis)
inTrain<-createDataPartition(y=A_train$diagnosis,p=.7,list=F)
training<-A_train[inTrain,]
testing<-A_train[-inTrain,]
modelfit<-train(diagnosis~.,data=training,method='rpart')
predictions<-predict(modelfit,newdata=testing)
confusionMatrix(predictions,testing$diagnosis)
cv<-trainControl(method='cv',number=5,verbose=T)
grid=expand.grid(maxdepth=c(2,4,5,7,8,9))
modelfit<-train(diagnosis~.,data=training,method='rpart2',tunegird=grid,trControl=cv)
predictions<-predict(modelfit,newdata=testing)
confusionMatrix(predictions,testing$diagnosis)
cv<-trainControl(method="cv",number=5,verbose=T)
grid=expand.grid(maxdepth=c(2,4,5,7,8,9))
modelfit<-train(diagnosis~.,data=training,method='rpart2',tunegird=grid,trControl=cv)
cv<-trainControl(method="cv",number=5,verbose=T)
grid=expand.grid(maxdepth=c(2,4,5,7,8,9))
modelfit<-train(diagnosis~.,data=training,method='rpart2',tunegird=grid,trControl=cv)
data(spam)
str(spam)
inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE)
training <- spam[inTrain, ]
testing <- spam[-inTrain, ]
set.seed(32343)
modelFit <- train(type ~ ., data = training, method = "rpart")
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$type)
trctrl <- trainControl(method = "cv", number = 5, verbose=T,search='random')
modelFit <- train(type ~ ., data = training, method = "rpart2",trControl=trctrl,tuneLength=20)
modelFit
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$type)
cv <- trainControl(method = "cv", number = 5, verbose = T)
grid = expand.grid(maxdepth = c(3,5,7,9,10,11,12))
modelFit <- train(type ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
modelFit
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$type)
inTrain <- createDataPartition(y = A_train$diagnosis, p = 0.75, list = FALSE)
training <- spam[inTrain, ]
testing <- spam[-inTrain, ]
set.seed(32343)
modelFit <- train(type ~ ., data = training, method = "rpart")
modelFit <- train(diagnosis ~ ., data = training, method = "rpart")
modelFit <- train(diagnosis ~ ., data = training, method = "rpart")
training
training <- spam[inTrain, ]
training <- A_train[inTrain, ]
testing <- A_train[-inTrain, ]
set.seed(32343)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart")
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$type)
confusionMatrix(predictions, testing$diagnosis)
trctrl <- trainControl(method = "cv", number = 5, verbose=T,search='random')
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",trControl=trctrl,tuneLength=20)
modelFit
set.seed(32343)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$type)
confusionMatrix(predictions, testing$diagnosis)
cv <- trainControl(method = "cv", number = 5, verbose = T)
grid = expand.grid(maxdepth = c(3,5,7,9,10,11,12))
modelFit <- train(type ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
modelFit
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$type)
confusionMatrix(predictions, testing$diagnosis)
confusionMatrix(predictions, testing$diagnosis)
grid = expand.grid(maxdepth = c(3,4,6,7,8,9))
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
modelFit
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",trControl=trctrl,tuneLength=20)
grid = expand.grid(maxdepth = c(2))
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
inTrain <- createDataPartition(y = A_train$diagnosis, p = 0.7, list = FALSE)
training <- A_train[inTrain, ]
testing <- A_train[-inTrain, ]
set.seed(32343)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart")
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
trctrl <- trainControl(method = "cv", number = 5, verbose=T,search='random')
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",trControl=trctrl,tuneLength=20)
modelFit
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
cv <- trainControl(method = "cv", number = 5, verbose = T)
grid = expand.grid(maxdepth = c(2))
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
grid = expand.grid(maxdepth = c(3,4,5,7,8,9))
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
cv <- trainControl(method = "cv", number = 7, verbose = T)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
grid = expand.grid(maxdepth = c(3,4,5,7,8,9))
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
grid = expand.grid(maxdepth = c(10,11,12,13,14,15))
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
partymod<-ctree(diagnosis~., data=training)
predictions <- predict(partymod, newdata = testing)
confusionMatrix(predictions, testing$type)
confusionMatrix(predictions, testing$diagnosis)
partymod<-ctree(diagnosis~., data=training)
predictions <- predict(partymod, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
grid = expand.grid(maxdepth = c(2,3))
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",trControl=trctrl,tuneLength=20)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
inTrain <- createDataPartition(y = A_train$diagnosis, p = 0.7, list = FALSE)
training <- A_train[inTrain, ]
testing <- A_train[-inTrain, ]
set.seed(32343)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart")
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",trControl=trctrl,tuneLength=20)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
grid = expand.grid(maxdepth = c(2,3))
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
cv <- trainControl(method = "cv", number = 50, verbose = T)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
grid = expand.grid(maxdepth = c(0))
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
cv <- trainControl(method = "cv", number = 5, verbose = T)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
grid = expand.grid(maxdepth = c(2,3,4))
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
modelFit
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
modelFit
grid = expand.grid(maxdepth = c(2,3,4,5,6,7))
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
modelFit
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
grid=expand.grid(maxdepth=c(3,4,5,6,7))
modelFit<-train(diagnosis~.,data=training,method='rpart2',tunegrid=grid,trControl=cv)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
modelFit
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
cv <- trainControl(method = "cv", number = 5, verbose = T)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
trctrl <- trainControl(method = "cv", number = 5, verbose=T,search='random')
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",trControl=trctrl,tuneLength=20)
modelFit
confusionMatrix(predictions, testing$diagnosis)
cv <- trainControl(method = "cv", number = 5, verbose = T)
grid = expand.grid(maxdepth = c(2,3,4,5,6,7))
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
modelFit
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
inTrain <- createDataPartition(y = A_train$diagnosis, p = 0.7, list = FALSE)
training <- A_train[inTrain, ]
testing <- A_train[-inTrain, ]
set.seed(32343)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart")
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
grid = expand.grid(maxdepth = c(2,3,4,5,6,7))
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
modelFit
#rpart2로 한 이유는 rpart에서는 파라미터 cp밖에 지원을 안해주고 2는 maxdepth까지 지원을 해준다고 함.
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
confusionMatrix(predictions, testing$diagnosis)
sub<-data.frame(diagnosis=predictions)
write.csv(sub,'sub.csv',row.names = FALSE)
confusionMatrix(predictions, testing$diagnosis)
predictions <- predict(modelFit, newdata = B_test)
grid=expand.grid(maxdepth=c(3,4,5,6,7))
modelFit<-train(diagnosis~.,data=training,method='rpart2',tunegrid=grid,trControl=cv)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
inTrain <- createDataPartition(y = A_train$diagnosis, p = 0.7, list = FALSE)
training <- A_train[inTrain, ]
testing <- A_train[-inTrain, ]
set.seed(32343)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart")
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
trctrl <- trainControl(method = "cv", number = 5, verbose=T,search='random')
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",trControl=trctrl,tuneLength=20)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
cv <- trainControl(method = "cv", number = 5, verbose = T)
grid = expand.grid(maxdepth = c(2,3,4,5,6,7))
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
predictions <- predict(modelFit, newdata = B_test)
sub<-data.frame(diagnosis=predictions)
write.csv(sub,'sub.csv',row.names = FALSE)
inTrain <- createDataPartition(y = A_train$diagnosis, p = 0.75, list = FALSE)
training <- A_train[inTrain, ]
testing <- A_train[-inTrain, ]
set.seed(32343)
modelFit <- train(diagnosis~ ., data = training, method = "rpart")
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
cv <- trainControl(method = "cv", number = 5, verbose = T)
#Cross_validation  #verbose를 해놔야 과정내역확인가능
grid = expand.grid(maxdepth = c(2,3,4,5,6,7))
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
modelFit
#rpart2로 한 이유는 rpart에서는 파라미터 cp밖에 지원을 안해주고 2는 maxdepth까지 지원을 해준다고 함.
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
predict<-predict(modelFit,newdata=A_train)
predictions
confusionMatrix(predictions,A_train$diagnosis)
modelFit<-train(diagnosis~.,data=training,method='rpart2',tunegrid=grid,trControl=cv)
modelFit <- train(diagnosis ~ ., data = training, method = "rpart2",tuneGrid = grid,trControl=cv)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
grid=expand.grid(maxdepth=c(2))
modelFit<-train(diagnosis~.,data=A_train,method='rpart2',tunegrid=grid,trControl=cv)
predict<-predict(modelFit,newdata=A_train)
confusionMatrix(predictions,A_train$diagnosis)
modelFit<-train(diagnosis~.,data=A_train,method='rpart2',tunegrid=grid,trControl=cv)
modelFit<-train(diagnosis~.,data=training,method='rpart2',tunegrid=grid,trControl=cv)
modelFit<-train(diagnosis~.,data=A_train,method='rpart2',tunegrid=grid,trControl=cv)
predict<-predict(modelFit,newdata=A_train)
confusionMatrix(predictions,A_train$diagnosis)
modelFit<-train(diagnosis~.,data=A_train,method='rpart2',tunegrid=grid,trControl=cv)
predict<-predict(modelFit,newdata=A_train)
confusionMatrix(predict,A_train$diagnosis)
#새로운 데이터의 y값 예측하기
predict <- predict(modelFit, newdata = B_test)
predict
sub<-data.frame(diagnosis=predict)
write.csv(sub,'sub.csv',row.names = FALSE)
