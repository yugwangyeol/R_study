setwd("E:/3주차 의사결정나무")
if (!require(caret)) {install.packages(('caret'))} ; library(caret)
if (!require(kernlab)) {install.packages(('kernlab'))} ; library(kernlab)
if (!require(tree)) {install.packages(('tree'))} ; library(tree)#버전문제
if (!require(party)) {install.packages(('party'))} ; library(party)
if (!require(e1071)) {install.packages(('e1071'))} ; library(e1071)
#데이터 불러오기
A_train<-read.csv('A_train.csv')
B_test<-read.csv('B_test.csv')
A_train$diagnosis<-as.factor(A_train$diagnosis)
#hold-out방법으로 성능체크
inTrain <- createDataPartition(y = A_train$diagnosis, p = 0.7, list = FALSE)
training <- A_train[inTrain, ]
testing <- A_train[-inTrain, ]
set.seed(32343)
modelFit <- train(diagnosis~ ., data = training, method = "rpart")
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
#새로운 데이터의 y값 예측하기
predictions <- predict(modelFit, newdata = B_test)
#제출할 파일 제출
sub<-data.frame(diagnosis=predictions)
write.csv(sub,'sub.csv',row.names = FALSE)
setwd("C:/Users/dhgus/Desktop/윤주")
answer<-read.csv('answer.csv')
answer$diagnosis<-as.factor(answer$diagnosis)
sub$diagnosis<-as.factor(sub$diagnosis)
confusionMatrix(sub$diagnosis, answer$diagnosis)
setwd("E:/3주차 의사결정나무")
#데이터 불러오기
A_train<-read.csv('A_train.csv')
B_test<-read.csv('B_test.csv')
A_train$diagnosis<-as.factor(A_train$diagnosis)
#hold-out방법으로 성능체크
inTrain <- createDataPartition(y = A_train$diagnosis, p = 0.7, list = FALSE)
training <- A_train[inTrain, ]
testing <- A_train[-inTrain, ]
set.seed(32343)
modelFit <- train(diagnosis~ ., data = training, method = "rpart")
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
#새로운 데이터의 y값 예측하기
predictions <- predict(modelFit, newdata = B_test)
#제출할 파일 제출
sub<-data.frame(diagnosis=predictions)
sub$diagnosis<-as.factor(sub$diagnosis)
confusionMatrix(sub$diagnosis, answer$diagnosis)
