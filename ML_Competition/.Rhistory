sprintf("홀수의 합=%d,짝수의 합=%d",sum(b),sum(a))
}
sum_function(10)
load("C:/Users/rltjq/Desktop/D&A/ML Session/ML_Conpetition/dataset.RDataTmp")
install.packages("data.table")
library("data.table")
library(dplyr)
if (!require(reshape2)) {install.packages(('reshape2'))} ; library(reshape2)
if (!require(tidyr)) {install.packages(('tidyr'))} ; library(tidyr)
if(!require(caret)) install.packages("caret"); library(caret)
if(!require(e1071)) install.packages("e1071"); library(e1071)
if(!require(randomForest)) install.packages("randomForest"); library(randomForest)
if(!require(xgboost)) install.packages("xgboost"); library(xgboost)
if(!require(tictoc)) install.packages("tictoc"); library('tictoc')
load("C:/Users/rltjq/Desktop/D&A/ML Session/ML_Conpetition/dataset.RDataTmp")
load("C:/Users/rltjq/Desktop/D&A/ML Session/ML_Conpetition/dataset.RDataTmp")
summary(hweight)
library(regbook)
install.packages('regbook')
library(regbook)
install.packages('regbook')
library(regbook)
install.packages("regbook")
install.packages("devtools")
library(regbook)
library(devtools)
install.packages("devtools")
library(devtools)
install_github("regbook/regbook")
library(regbook)
summary(hweight)
male <- subset(hweight,gender=='M')
hist(male$height,probability = TRUE)
lines(density(male$height))
histf(male$height)
y <- male$height
n <- length(y)
mean(y) + qt(c(0.025, 0.975),n-1)*sd(y)/sqrt(n)
qt(c(0.025, 0.975),n-1)
ybar <- mean(y)
s <- sd(y)
se <- s/sqrt(n)
ybar
s
se
(ybar-173)/se
qt(0.975, df=n-1)
p_value <- 2*(1-pt(2.477, df=n-1))
p_value
t.test(male$height, mu=173, alternative = 'two.sided')
qqnorm(y)
qqline(y)
library(devtools)
library(regbook)
#1.10
female <- hweight$gender == 'F'
#1.10
female <- subset(hweight,gender == 'F')
female
hist(female)
hist(female$weight)
density()
lines(density(female$weight))
hist(female$weight)
histf(female$weight)
lines(density(female$height))
histf(female$height)
lines(density(female$weight))
histf(female$weight)
lines(density(female$height))
histf(female$height)
lines(density(female$weight))
histf(female$weight)
# 1.11
plot(weight~height, col = gender, data = hweight)
boxplot(hweight)
boxplot(x=gender,y=weight)
boxplot(x=hweight$gender,y=hweight$weight)
boxplot(hweight$weight)
boxplot(weight~gender, data=hweight)
#1.12
str(hweight)
#1.12
summary(female$height)
sd(female$height)
var(female$height)
sd(female$height)/sqrt(352)
n=352
qt(c(0.025,0.975),df=n-1)
#1.13
t.test(female$height,mu=351,alternative = 'two-sided')
#1.13
t.test(female$height,mu=351,alternative = 'two.sided')
qqnorm(female$height)
qqline(female$height)
#1.14
plot(height~weight,data=female)
cov(height,weight)
cov(female$weight,female$height)
#1.14
with(female,cor(height,weight))
with(female,cor.test(height,weight))
#1.14
plot(height~weight,data=female)
with(female,cor(height,weight))
with(female,cor.test(height,weight))
n <- nrow(female)
r <- with(female, cor(height, weight))
rho <- 0.4
z <- 1/2 * sqrt(n-3)*log(((1+r)*(1-rho))/((1-r)*(1+rho)))
z
p.value <- 2 * (1-pnorm(z))
p.value
#1.15
str(waist)
#1.15
with(waist,plot(waist,neck))
with(waist,cor(waist,neck))
n <- nrow(waist)
r <- with(waist,cor(waist,neck))
rho <- 0.9
z <- 1/2 * sqrt(n-3)*log(((1+r)*(1-rho))/((1-r)*(1+rho)))
z
p.value <- 2 * (1-pnorm(z))
p.value
#1.16
str(examscore)
#1.16
with(examscore,plot(final,mid))
final
#1.16
with(examscore,plot(mid,final))
sapply(examscore,sd)
sapply(examscore,var)
with(examscore,cor(mid,final))
sapply(examscore,var)[1]
mean_mid <- sapply(examscore,mean)[1]
mean_final <- sapply(examscore,mean)[2]
sd_mid <- sapply(examscore,sd)[1]
sd_final <- sapply(examscore,sd)[2]
abline(c(mean_mid,mean_final),c(mean_mid+sd_mid,mean_final,sd_final))
with(examscore,plot(mid,final))
abline(c(mean_mid,mean_final),c(mean_mid+sd_mid,mean_final,sd_final))
abline(c(mean_mid,mean_final),c(mean_mid+sd_mid,mean_final+sd_final))
with(examscore,plot(mid,final))
abline(c(mean_mid,mean_final),c(mean_mid+sd_mid,mean_final+sd_final))
abline(a=mean_final-(mean_mid)*sd_final/sd_mid,b=sd_final/sd_mid)
#1.17
x <- c(1,2,3,4,5)
y <- c(2,4,5,4,3)
cor(x,y)
plot(x,y)
#1.18
sim.ci <- function(nci=100, alpha=0.10, n=30, mu=10, sigma=10) {
xbar <- numeric(nci)
for ( i in 1:nci ) xbar[i] <- sum(rnorm(n, mu, sigma)) / n
width <- qnorm(1-alpha/2) * sigma / sqrt(n)
matplot( rbind(xbar~width, xbar+width), rbind(1:nci,1:nci),
type='1', lty=1, xlab='mu',ylab="")
abline(v=mu)
title(main="Confidence Interval Simulation for Normal Population Mean")
conflevel <- sum( (xbar~width < mu) & (mu < xbar+width)) / nci
conflevel
}
sim.ci
View(sim.ci)
sim.ci
sim.ci(100,0.1,30,10,10)
sim.ci()
#1.18
sim.ci <- function(nci=100, alpha=0.10, n=30, mu=10, sigma=10) {
xbar <- numeric(nci)
for ( i in 1:nci ) xbar[i] <- sum(rnorm(n, mu, sigma)) / n
width <- qnorm(1-alpha/2) * sigma / sqrt(n)
matplot( rbind(xbar-width, xbar+width), rbind(1:nci,1:nci),
type='1', lty=1, xlab='mu',ylab="")
abline(v=mu)
title(main="Confidence Interval Simulation for Normal Population Mean")
conflevel <- sum( (xbar-width < mu) & (mu < xbar+width)) / nci
conflevel
}
sim.ci()
matplot( rbind(xbar-width, xbar+width), rbind(1:nci,1:nci),
type='l', lty=1, xlab='mu',ylab="")
#1.18
sim.ci <- function(nci=100, alpha=0.10, n=30, mu=10, sigma=10) {
xbar <- numeric(nci)
for ( i in 1:nci ) xbar[i] <- sum(rnorm(n, mu, sigma)) / n
width <- qnorm(1-alpha/2) * sigma / sqrt(n)
matplot( rbind(xbar-width, xbar+width), rbind(1:nci,1:nci),
type='l', lty=1, xlab='mu',ylab="")
abline(v=mu)
title(main="Confidence Interval Simulation for Normal Population Mean")
conflevel <- sum( (xbar-width < mu) & (mu < xbar+width)) / nci
conflevel
}
sim.ci()
#1.18
sim.ci <- function(nci=100, alpha=0.05, n=30, mu=10, sigma=10) {
xbar <- numeric(nci)
for ( i in 1:nci ) xbar[i] <- sum(rnorm(n, mu, sigma)) / n
width <- qnorm(1-alpha/2) * sigma / sqrt(n)
matplot( rbind(xbar-width, xbar+width), rbind(1:nci,1:nci),
type='l', lty=1, xlab='mu',ylab="")
abline(v=mu)
title(main="Confidence Interval Simulation for Normal Population Mean")
conflevel <- sum( (xbar-width < mu) & (mu < xbar+width)) / nci
conflevel
}
sim.ci()
#1.18
sim.ci <- function(nci=100, alpha=0.10, n=50, mu=10, sigma=10) {
xbar <- numeric(nci)
for ( i in 1:nci ) xbar[i] <- sum(rnorm(n, mu, sigma)) / n
width <- qnorm(1-alpha/2) * sigma / sqrt(n)
matplot( rbind(xbar-width, xbar+width), rbind(1:nci,1:nci),
type='l', lty=1, xlab='mu',ylab="")
abline(v=mu)
title(main="Confidence Interval Simulation for Normal Population Mean")
conflevel <- sum( (xbar-width < mu) & (mu < xbar+width)) / nci
conflevel
}
sim.ci()
xbar <- numeric(100)
xbar
lm(xbar)
rm(xbar)
library(devtools)
library(regbook)
x <- c(1,2,3)
library(devtools)
library(regbook)
aflength.lm <- lm(foot~forearm, aflength)
abline(aflength.lm)
plot(aflength.lm)
plot(foot~forearm, aflength)
abline(aflength.lm)
summary(aflength.lm)
e <- resid(aflength.lm)
n <- length(e)
sse <- sum(e^2)
s2 <- sse / (n-2)
s <- sqrt(s2)
library(devtools)
library(regbook)
1-pnorm(175, mean = 170, sd = 6)
pnorm(180, mean = 170, sd = 6) - pnorm(175, mean = 170, sd = 6)
head(hweight)
hist(hweight$gender=='M')
hist(hweight)
male
hist(male)
with(male,hist(weight~height))
with(male,hist(weight))
lm(male)
lm(male)
male <- subset(hweight, gender=='M')
with(male,hist(weight))
with(male,hist(height))
with(male,lines(density(weight)))
with(male,hist(weight))
with(male,lines(density(weight)))
with(male,lines(density(weight)))
histf(male$weight)
hist(male$weight)
lines(density(male$weight))
hist(male$weight,probability = TRUE)
lines(density(male$weight))
histf(male$weight)
with(hweight,boxplot(weight~gender))
y <-  male$weight
n <- length(y)
mean(y) + qt(c(0.025,0.975),n-1) * sd(y) / sqrt(n)
ybar <- mean(y)
s <- sd(y)
se <- s / sqrt(n)
(ybar - 173) / se
y <-  male$height
n <- length(y)
ybar <- mean(y)
s <- sd(y)
se <- s / sqrt(n)
(ybar - 173) / se
ybar + qt(c(0.025,0.975), n-1) * se
qt(c(0.025,0.975), n-1) * se
qt(0.975, n-1)
qt(0.025, n-1)
ybar
(ybar - 173) / se
t_1 <- (ybar - 173) / se
t_0 <- qt(0.975, n-1)
t_1 - t_0
t_1 <- (173.5 - 173) / se
t_0 <- qt(0.975, n-1)
t_1 - t_0
(173.5 - 173) / se
qt(0.975, n-1)
qnorm(y)
qqnorm(y)
qqline(y)
t.test(y, mu=173, alternative = 'two.sided')
rnorm()
rnorm(5)
a <- rnorm(5)
qqnorm(a)
qqline(a)
a <- rnorm(100)
qqnorm(a)
qqline(a)
a <- rnorm(50)
qqnorm(a)
qqline(a)
scatter(hweight)
setwd("C:/Users/rltjq/Desktop/D&A/ML Session/ML_Competition")
train_cs <- read.csv('train_clickstreams.tab',sep = '\t')
install.packages(c("caret", "e1071", "randomForest", "tictoc", "xgboost"))
train_cs <- fread('train_clickstreams.tab')
library(data.table)
library(dplyr)
if (!require(reshape2)) {install.packages(('reshape2'))} ; library(reshape2)
if (!require(tidyr)) {install.packages(('tidyr'))} ; library(tidyr)
if(!require(caret)) install.packages("caret"); library(caret)
if(!require(e1071)) install.packages("e1071"); library(e1071)
if(!require(randomForest)) install.packages("randomForest"); library(randomForest)
if(!require(xgboost)) install.packages("xgboost"); library(xgboost)
if(!require(tictoc)) install.packages("tictoc"); library(tictoc)
train_cs <- fread('train_clickstreams.tab')
test_c <- fread('test_clickstreams.tab')
test_s <- fread('test_searchkeywords.tab')
train_c <- fread('train_clickstreams.tab')
train_s <- fread('train_searchkeywords.tab')
train_p <- read.csv('train_profiles.csv')
head(train_c)
head(train_p)
merge(train_c,train_p)
train_c <- merge(train_c,train_p)
head(train_c)
head(train_s)
train_s <- merge(train_s,train_p)
head(train_s)
train_c[,'GROUP']
train_c[,c('GROUP')][0]
c(train_c[,c('GROUP')])
View(train_c)
c(train_c[,c('GROUP')])[0]
feature <- data.frame(1:2500)
feature
train_c$GROUP[0]
train_c <- fread('train_clickstreams.tab',stringsAsFactors = FALSE)
train_p <- read.csv('train_profiles.csv',stringsAsFactors = FALSE)
train_c <- merge(train_c,train_p)
train_s <- merge(train_s,train_p)
apply(train_c$GROUP, 1, )
train_c$GROUP[0]
train_c$GROUP
train_c$GROUP[1]
train_c$GROUP[1][1]
str(train_c$GROUP[1])
str(train_c$GROUP[1])[1]
length(train_c$GROUP[1])
str(train_c$GROUP[1])
split(train_c$GROUP[1])
general <- function(x){
if (x=='M40+' | 'M30' | 'M20-') {
print('M')
} else {
print('F')
}
}
general(train_c$GROUP[1])
if (x=='M40+' | x=='M30' | x=='M20-') {
print('M')
} else {
print('F')
}
general <- function(x){
if (x=='M40+' | x=='M30' | x=='M20-') {
print('M')
} else {
print('F')
}
}
general(train_c$GROUP[1])
apply(train_c$GROUP, 1, general)
dim(train_c$GROUP)
train_c$GROUP
str(train_c$GROUP)
lapply(train_c$GROUP, 1, general)
lapply(train_c$GROUP, general)
general_f <- function(x){
if (x=='M40+' | x=='M30' | x=='M20-') {
print('M')
} else {
print('F')
}
}
general <- lapply(train_c$GROUP, general_f)
general_f <- function(x){
if (x=='M40+' | x=='M30' | x=='M20-') {
'M'
} else {
'F'
}
}
general <- lapply(train_c$GROUP, general_f)
lm(general)
ls(general)
rm(list=ls(general))
View(general)
general <- lapply(train_p$GROUP, general_f)
general
str(general)
general <- as.vector(general)
head(general)
general <- as.vector(general)
general <- sapply(train_p$GROUP, general_f)
head(general)
general <- lapply(train_p$GROUP, general_f)
unlist(general)
general <- unlist(general)
train_c['GENDER'] <- general
cbind(train_c,general)
general <- lapply(train_c$GROUP, general_f)
general <- unlist(general)
train_c <- cbind(train_c, general)
head(train_c)
plot(train_c,general)
with(train_c, plot(BACT_NM,general)
with(train_c, plot(BACT_NM,general))
with(train_c, plot(BACT_NM,general))
with(train_c, plot(general,BACT_NM))
with(train_c, plot(general=='M',BACT_NM))
subset(train_c,general=='M')
male <- subset(train_c,general=='M')
with(male, plot(BACT_NM,general))
with(male, plot(BACT_NM))
with(male, barplot(BACT_NM))
count(male$BACT_NM)
table(male$BACT_NM)
barplot(table(male$BACT_NM))
barplot(table(male$MACT_NM))
barplot(table(male$MACT_NM), rotate.names = TRUE)
barplot(table(male$MACT_NM), horiz = FALSE)
barplot(table(male$MACT_NM), horiz = FALSE)
barplot(table(male$MACT_NM), horiz = TRUE)
barplot(table(male$MACT_NM), axisnames = TRUE)
barplot(table(male$MACT_NM), axisnames = FALSE)
pie(table(male$MACT_NM))
barplot(table(male$MACT_NM))
barplot(table(male$MACT_NM), axes = F)
barplot(table(male$MACT_NM) beside = T, axes = F)
barplot(table(male$MACT_NM) beside = T, axes = F)
barplot(table(male$MACT_NM), beside = T, axes = F)
axis(1)
axis(1, las = 2)
axis(2, las = 2)
barplot(table(male$MACT_NM), beside = T, axes = F)
axis(2, las = 2)
axis(2, las = 1)
axis(1, las = 2)
axis(1, at = 1:length(table(male$MACT_NM)), labels = table(male$MACT_NM), las = 2)
axis(1, at = 1:length(unique(male$MACT_NM)), labels = table(male$MACT_NM), las = 2)
barplot(table(male$MACT_NM), beside = T, axes = F)
axis(1, at = 1:length(unique(male$MACT_NM)), labels = table(male$MACT_NM), las = 2)
barplot(table(male$MACT_NM), beside = T, axes = F)
barplot(table(male$MACT_NM), beside = T)
axis(2, las = 1)
barplot(table(male$MACT_NM), beside = T)
table(male$MACT_NM)
table(male$MACT_NM)
sort(table(male$MACT_NM))
female <- subset(train_c, general == 'F')
sort(table(female$MACT_NM))
pie(sort(table(male$MACT_NM)))
pie(sort(table(female$MACT_NM)))
m20 <- subset(train_c,general=='M20-')
m20 <- subset(train_c,GROUP=='M20-')
m30 <- subset(train_c, general == 'M30')
m40 <- subset(train_c, general == 'M40+')
f20 <- subset(train_c, general == 'F20-')
f30 <- subset(train_c, general == 'F30')
f40 <- subset(train_c, general == 'F40+')
m30 <- subset(train_c, GROUP == 'M30')
m40 <- subset(train_c, GROUP == 'M40+')
f20 <- subset(train_c, GROUP == 'F20-')
f30 <- subset(train_c, GROUP == 'F30')
f40 <- subset(train_c, GROUP == 'F40+')
pie(table(m20$MACT_NM))
pie(sort(table(m20$MACT_NM)))
pie(sort(table(f20$MACT_NM)))
pie(sort(table(f30$MACT_NM)))
pie(sort(table(f40$MACT_NM)))
pie(sort(table(m40$MACT_NM)))
pie(sort(table(m30$MACT_NM)))
pie(sort(table(m20$MACT_NM)))
pie(sort(table(m20$BACT_NM)))
train_c[,BACT_NM=="인터넷/컴퓨터"]
train_c[BACT_NM=="인터넷/컴퓨터"]
unique(train_c[BACT_NM=="인터넷/컴퓨터"]$MACT_NM)
m20[!(m20$MACT_NM=='검색'|m20$MACT_NM=='포털'),]
pie(sort(table(m20[!(m20$MACT_NM=='검색'|m20$MACT_NM=='포털'),])))
table(m20[!(m20$MACT_NM=='검색'|m20$MACT_NM=='포털'),])
m20[!(m20$MACT_NM=='검색'|m20$MACT_NM=='포털'),]
table(m20[!(m20$MACT_NM=='검색'|m20$MACT_NM=='포털'),])
m20_1 <- m20[!(m20$MACT_NM=='검색'|m20$MACT_NM=='포털'),]
pie(sort(table(m20_1)))
pie(sort(table(m20_1$MACT_NM)))
pie(sort(table(m30[!(m30$MACT_NM=='검색'|m30$MACT_NM=='포털'),]$MACT_NM)))
pie(sort(table(m40[!(m40$MACT_NM=='검색'|m40$MACT_NM=='포털'),]$MACT_NM)))
pie(sort(table(f40[!(f40$MACT_NM=='검색'|f40$MACT_NM=='포털'),]$MACT_NM)))
pie(sort(table(f30[!(f30$MACT_NM=='검색'|f30$MACT_NM=='포털'),]$MACT_NM)))
pie(sort(table(f20[!(f20$MACT_NM=='검색'|f20$MACT_NM=='포털'),]$MACT_NM)))
