install.packages('e1071')
library(e1071) # svm
library(dplyr) # data wrangling
iris %>% head()
svm_model <- svm(Species ~ ., data=iris) ; svm_model
svm_tune <- tune(svm, train.x=subset(iris, select=-Species),
train.y=iris$Species,
kernel="radial", # kernel 기법 사용
ranges=list(cost=10^(-1:2))) # C 값을 튜닝
print(svm_tune)
### packages
if(!require(caret)) install.packages("caret"); library(caret)
if(!require(e1071)) install.packages("e1071"); library(e1071)
if(!require(dplyr)) install.packages("dplyr"); library(dplyr)
if(!require(randomForest)) install.packages("randomForest"); library(randomForest)
library(lubridate)
setwd("C:/Users/rltjq/Desktop/D&A/ML Session/ML_4주차")
source('C:/Users/rltjq/Desktop/D&A/ML Session/ML_4주차/4주차.R', echo=TRUE)
source('C:/Users/rltjq/Desktop/D&A/ML Session/ML_4주차/4주차.R', echo=TRUE)
source('C:/Users/rltjq/Desktop/D&A/ML Session/ML_4주차/4주차.R', echo=TRUE)
### data 불러오기
dat = read.csv("dat.csv")
dat$is_cancer = as.factor(dat$is_cancer)
dat <- dat[-1]
### train / test 분할
set.seed(1)
prop.table(table(dat$is_cancer))
idx = createDataPartition(dat$is_cancer, p = 0.7, list=F)
train = dat[idx,]
test = dat[-idx,]
##변수 중요도
m <- randomForest(is_cancer ~., data=train, importance=TRUE)
importance(m)
varImpPlot(m, main="varImpPlot of cancer")
